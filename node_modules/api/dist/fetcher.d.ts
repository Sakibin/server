import type { OASDocument } from 'oas/types';
export default class Fetcher {
    uri: string | OASDocument;
    /**
     * @note This regex also exists in `httpsnippet-client-api`.
     *
     * @example @petstore/v1.0#n6kvf10vakpemvplx
     * @example @petstore#n6kvf10vakpemvplx
     */
    static registryUUIDRegex: RegExp;
    constructor(uri: string | OASDocument);
    static isAPIRegistryUUID(uri: string): boolean;
    static isGitHubBlobURL(uri: string): boolean;
    /**
     * @note This function also exists in `httpsnippet-client-api`.
     */
    static getProjectPrefixFromRegistryUUID(uri: string): string | undefined;
    load(): Promise<(import("openapi-types").OpenAPIV3.Document<{}> & Record<string, unknown>) | (Omit<Omit<import("openapi-types").OpenAPIV3.Document<{}>, "paths" | "components">, "paths" | "components" | "info" | "servers" | "webhooks" | "jsonSchemaDialect"> & {
        info: import("openapi-types").OpenAPIV3_1.InfoObject;
        jsonSchemaDialect?: string | undefined;
        servers?: import("openapi-types").OpenAPIV3_1.ServerObject[] | undefined;
    } & Pick<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }, "paths"> & Omit<Partial<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }>, "paths"> & Record<string, unknown>) | (Omit<Omit<import("openapi-types").OpenAPIV3.Document<{}>, "paths" | "components">, "paths" | "components" | "info" | "servers" | "webhooks" | "jsonSchemaDialect"> & {
        info: import("openapi-types").OpenAPIV3_1.InfoObject;
        jsonSchemaDialect?: string | undefined;
        servers?: import("openapi-types").OpenAPIV3_1.ServerObject[] | undefined;
    } & Pick<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }, "webhooks"> & Omit<Partial<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }>, "webhooks"> & Record<string, unknown>) | (Omit<Omit<import("openapi-types").OpenAPIV3.Document<{}>, "paths" | "components">, "paths" | "components" | "info" | "servers" | "webhooks" | "jsonSchemaDialect"> & {
        info: import("openapi-types").OpenAPIV3_1.InfoObject;
        jsonSchemaDialect?: string | undefined;
        servers?: import("openapi-types").OpenAPIV3_1.ServerObject[] | undefined;
    } & Pick<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }, "components"> & Omit<Partial<{
        paths: import("openapi-types").OpenAPIV3_1.PathsObject<{}, {}>;
        webhooks: Record<string, import("openapi-types").OpenAPIV3_1.ReferenceObject | import("openapi-types").OpenAPIV3_1.PathItemObject<{}>>;
        components: import("openapi-types").OpenAPIV3_1.ComponentsObject;
    }>, "components"> & Record<string, unknown>)>;
    static getURL(url: string): Promise<any>;
    static getFile(uri: string): Promise<any>;
    static validate(json: OASDocument): Promise<import("openapi-types").OpenAPI.Document<{}>>;
}
//# sourceMappingURL=fetcher.d.ts.map