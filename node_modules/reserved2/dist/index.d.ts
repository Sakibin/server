export declare const reserved: readonly [
	"abstract",
	"arguments",
	"boolean",
	"break",
	"byte",
	"case",
	"catch",
	"char",
	"class",
	"const",
	"continue",
	"debugger",
	"default",
	"delete",
	"do",
	"double",
	"else",
	"enum",
	"eval",
	"export",
	"extends",
	"false",
	"final",
	"finally",
	"float",
	"for",
	"function",
	"goto",
	"if",
	"implements",
	"import",
	"in",
	"instanceof",
	"int",
	"interface",
	"let",
	"long",
	"native",
	"new",
	"null",
	"package",
	"private",
	"protected",
	"public",
	"return",
	"short",
	"static",
	"super",
	"switch",
	"synchronized",
	"this",
	"throw",
	"throws",
	"transient",
	"true",
	"try",
	"typeof",
	"var",
	"void",
	"volatile",
	"while",
	"with",
	"yield"
];
/**
 * @see https://github.com/jonschlinkert/reserved
 */
export declare const builtins: readonly [
	"Array",
	"Date",
	"eval",
	"function",
	"hasOwnProperty",
	"Infinity",
	"isFinite",
	"isNaN",
	"isPrototypeOf",
	"length",
	"Math",
	"name",
	"NaN",
	"Number",
	"Object",
	"prototype",
	"String",
	"toString",
	"undefined",
	"valueOf"
];
export declare const mixinReservedBuiltins: readonly [
	"abstract",
	"arguments",
	"boolean",
	"break",
	"byte",
	"case",
	"catch",
	"char",
	"class",
	"const",
	"continue",
	"debugger",
	"default",
	"delete",
	"do",
	"double",
	"else",
	"enum",
	"eval",
	"export",
	"extends",
	"false",
	"final",
	"finally",
	"float",
	"for",
	"function",
	"goto",
	"if",
	"implements",
	"import",
	"in",
	"instanceof",
	"int",
	"interface",
	"let",
	"long",
	"native",
	"new",
	"null",
	"package",
	"private",
	"protected",
	"public",
	"return",
	"short",
	"static",
	"super",
	"switch",
	"synchronized",
	"this",
	"throw",
	"throws",
	"transient",
	"true",
	"try",
	"typeof",
	"var",
	"void",
	"volatile",
	"while",
	"with",
	"yield",
	"Array",
	"Date",
	"eval",
	"function",
	"hasOwnProperty",
	"Infinity",
	"isFinite",
	"isNaN",
	"isPrototypeOf",
	"length",
	"Math",
	"name",
	"NaN",
	"Number",
	"Object",
	"prototype",
	"String",
	"toString",
	"undefined",
	"valueOf"
];
export declare const mixinReservedBuiltinsLC: readonly ("string" | "number" | "boolean" | "undefined" | "object" | "function" | "abstract" | "arguments" | "break" | "byte" | "case" | "catch" | "char" | "class" | "const" | "continue" | "debugger" | "default" | "delete" | "do" | "double" | "else" | "enum" | "eval" | "export" | "extends" | "false" | "final" | "finally" | "float" | "for" | "goto" | "if" | "implements" | "import" | "in" | "instanceof" | "int" | "interface" | "let" | "long" | "native" | "new" | "null" | "package" | "private" | "protected" | "public" | "return" | "short" | "static" | "super" | "switch" | "synchronized" | "this" | "throw" | "throws" | "transient" | "true" | "try" | "typeof" | "var" | "void" | "volatile" | "while" | "with" | "yield" | "length" | "name" | "prototype" | "array" | "date" | "hasownproperty" | "infinity" | "isfinite" | "isnan" | "isprototypeof" | "math" | "nan" | "tostring" | "valueof")[];
export type IMixinReservedBuiltins = typeof mixinReservedBuiltins[number];
export declare function containReservedOrBuiltins(input: string): boolean;
export declare function isReservedOrBuiltins(input: string): input is IMixinReservedBuiltins;
export declare function isReservedOrBuiltinsLC(input: string): input is IMixinReservedBuiltins;

export {
	mixinReservedBuiltins as default,
};

export {};
