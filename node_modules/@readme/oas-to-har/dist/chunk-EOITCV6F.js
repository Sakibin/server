// src/lib/configure-security.ts
import { isRef } from "oas/types";
function harValue(type, value) {
  if (!value.value)
    return void 0;
  return { type, value };
}
function configureSecurity(apiDefinition, values, scheme) {
  if (!scheme)
    return void 0;
  if (Object.keys(values || {}).length === 0)
    return void 0;
  if (!apiDefinition.components.securitySchemes[scheme])
    return void 0;
  const security = apiDefinition.components.securitySchemes[scheme];
  if (isRef(security)) {
    return void 0;
  } else if (!values[scheme]) {
    return false;
  }
  if (security.type === "http") {
    if (security.scheme === "basic") {
      const auth = values[scheme];
      if (typeof auth !== "object")
        return false;
      if (!auth.user && !auth.pass)
        return false;
      let user = auth.user ?? null;
      if (user === null || user.length === 0) {
        user = "";
      }
      let pass = auth.pass ?? null;
      if (pass === null || pass.length === 0) {
        pass = "";
      }
      return harValue("headers", {
        name: "authorization",
        value: `Basic ${Buffer.from(`${user}:${pass}`).toString("base64")}`
      });
    } else if (security.scheme === "bearer") {
      return harValue("headers", {
        name: "authorization",
        value: `Bearer ${values[scheme]}`
      });
    }
  }
  if (security.type === "apiKey") {
    if (security.in === "query") {
      return harValue("queryString", {
        name: security.name,
        value: String(values[scheme])
      });
    } else if (security.in === "header") {
      const header = {
        name: security.name,
        value: String(values[scheme])
      };
      if (security["x-bearer-format"]) {
        const bearerFormat = security["x-bearer-format"].charAt(0).toUpperCase() + security["x-bearer-format"].slice(1);
        header.name = security.name;
        header.value = `${bearerFormat} ${header.value}`;
      }
      return harValue("headers", header);
    } else if (security.in === "cookie") {
      return harValue("cookies", {
        name: security.name,
        value: String(values[scheme])
      });
    }
  }
  if (security.type === "oauth2") {
    return harValue("headers", {
      name: "authorization",
      value: `Bearer ${values[scheme]}`
    });
  }
  return void 0;
}

export {
  configureSecurity
};
//# sourceMappingURL=chunk-EOITCV6F.js.map