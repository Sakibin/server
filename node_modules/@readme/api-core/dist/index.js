import {
  FetchError
} from "./chunk-L7DN22AA.js";
import {
  parseResponse,
  prepareAuth,
  prepareParams,
  prepareServer
} from "./chunk-TUSNVQG6.js";

// src/index.ts
import oasToHar from "@readme/oas-to-har";
import fetchHar from "fetch-har";
import Oas from "oas";
var APICore = class {
  spec;
  auth = [];
  server = false;
  config = {};
  userAgent;
  constructor(definition, userAgent) {
    if (definition)
      this.spec = Oas.init(definition);
    if (userAgent)
      this.userAgent = userAgent;
  }
  setSpec(spec) {
    this.spec = spec;
  }
  setConfig(config) {
    this.config = config;
    return this;
  }
  setUserAgent(userAgent) {
    this.userAgent = userAgent;
    return this;
  }
  setAuth(...values) {
    this.auth = values;
    return this;
  }
  setServer(url, variables = {}) {
    this.server = { url, variables };
    return this;
  }
  async fetch(path, method, body, metadata) {
    const operation = this.spec.operation(path, method);
    return this.fetchOperation(operation, body, metadata);
  }
  /**
   * Retrieve a HAR for a given HTTP request.
   *
   * @internal
   */
  getHARForRequest(operation, data, auth) {
    return oasToHar(this.spec, operation, data, auth);
  }
  async fetchOperation(operation, body, metadata) {
    return prepareParams(operation, body, metadata).then((params) => {
      const data = { ...params };
      if (this.server) {
        const preparedServer = prepareServer(this.spec, this.server.url, this.server.variables);
        if (preparedServer) {
          data.server = preparedServer;
        }
      }
      const har = this.getHARForRequest(operation, data, prepareAuth(this.auth, operation));
      let timeoutSignal;
      const init = {};
      if (this.config.timeout) {
        const controller = new AbortController();
        timeoutSignal = setTimeout(() => controller.abort(), this.config.timeout);
        init.signal = controller.signal;
      }
      return fetchHar(har, {
        files: data.files || {},
        init,
        userAgent: this.userAgent
      }).then(async (res) => {
        const parsed = await parseResponse(res);
        if (res.status >= 400 && res.status <= 599) {
          throw new FetchError(
            parsed.status,
            parsed.data,
            parsed.headers,
            parsed.res
          );
        }
        return parsed;
      }).finally(() => {
        if (this.config.timeout) {
          clearTimeout(timeoutSignal);
        }
      });
    });
  }
};
export {
  APICore as default
};
//# sourceMappingURL=index.js.map