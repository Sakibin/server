import * as har_format from 'har-format';
import { ConfigOptions } from './types.cjs';
import { DataForHAR, AuthForHAR } from '@readme/oas-to-har/lib/types';
import { Operation } from 'oas/operation';
import { OASDocument, HttpMethods } from 'oas/types';
import Oas from 'oas';
import 'json-schema-to-ts';

declare class APICore {
    spec: Oas;
    private auth;
    private server;
    private config;
    private userAgent;
    constructor(definition?: Record<string, unknown> | OASDocument, userAgent?: string);
    setSpec(spec: Oas): void;
    setConfig(config: ConfigOptions): this;
    setUserAgent(userAgent: string): this;
    setAuth(...values: string[] | number[]): this;
    setServer(url: string, variables?: Record<string, string | number>): this;
    fetch<HTTPStatus extends number = number>(path: string, method: HttpMethods, body?: unknown, metadata?: Record<string, unknown>): Promise<{
        data: any;
        status: HTTPStatus;
        headers: Headers;
        res: Response;
    }>;
    /**
     * Retrieve a HAR for a given HTTP request.
     *
     * @internal
     */
    getHARForRequest(operation: Operation, data: DataForHAR, auth: AuthForHAR): {
        log: {
            entries: {
                request: har_format.Request;
            }[];
        };
    };
    fetchOperation<HTTPStatus extends number = number>(operation: Operation, body?: unknown, metadata?: Record<string, unknown>): Promise<{
        data: any;
        status: HTTPStatus;
        headers: Headers;
        res: Response;
    }>;
}

export = APICore;
