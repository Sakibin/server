{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { ConfigOptions } from './types.js';\nimport type { AuthForHAR, DataForHAR } from '@readme/oas-to-har/lib/types';\nimport type { Har } from 'har-format';\nimport type { Operation } from 'oas/operation';\nimport type { HttpMethods, OASDocument } from 'oas/types';\n\nimport oasToHar from '@readme/oas-to-har';\nimport fetchHar from 'fetch-har';\nimport Oas from 'oas';\n\nimport FetchError from './errors/fetchError.js';\nimport { parseResponse, prepareAuth, prepareParams, prepareServer } from './lib/index.js';\n\nexport default class APICore {\n  spec!: Oas;\n\n  private auth: (number | string)[] = [];\n\n  private server:\n    | false\n    | {\n        url: string;\n        variables?: Record<string, string | number>;\n      } = false;\n\n  private config: ConfigOptions = {};\n\n  private userAgent!: string;\n\n  constructor(definition?: Record<string, unknown> | OASDocument, userAgent?: string) {\n    if (definition) this.spec = Oas.init(definition);\n    if (userAgent) this.userAgent = userAgent;\n  }\n\n  setSpec(spec: Oas) {\n    this.spec = spec;\n  }\n\n  setConfig(config: ConfigOptions) {\n    this.config = config;\n    return this;\n  }\n\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n    return this;\n  }\n\n  setAuth(...values: string[] | number[]) {\n    this.auth = values;\n    return this;\n  }\n\n  setServer(url: string, variables: Record<string, string | number> = {}) {\n    this.server = { url, variables };\n    return this;\n  }\n\n  async fetch<HTTPStatus extends number = number>(\n    path: string,\n    method: HttpMethods,\n    body?: unknown,\n    metadata?: Record<string, unknown>,\n  ) {\n    const operation = this.spec.operation(path, method);\n\n    return this.fetchOperation<HTTPStatus>(operation, body, metadata);\n  }\n\n  /**\n   * Retrieve a HAR for a given HTTP request.\n   *\n   * @internal\n   */\n  getHARForRequest(operation: Operation, data: DataForHAR, auth: AuthForHAR) {\n    return oasToHar(this.spec, operation, data, auth);\n  }\n\n  async fetchOperation<HTTPStatus extends number = number>(\n    operation: Operation,\n    body?: unknown,\n    metadata?: Record<string, unknown>,\n  ) {\n    return prepareParams(operation, body, metadata).then(params => {\n      const data = { ...params };\n\n      // If `sdk.server()` has been issued data then we need to do some extra work to figure out\n      // how to use that supplied server, and also handle any server variables that were sent\n      // alongside it.\n      if (this.server) {\n        const preparedServer = prepareServer(this.spec, this.server.url, this.server.variables);\n        if (preparedServer) {\n          data.server = preparedServer;\n        }\n      }\n\n      const har = this.getHARForRequest(operation, data, prepareAuth(this.auth, operation));\n\n      let timeoutSignal: NodeJS.Timeout;\n      const init: RequestInit = {};\n      if (this.config.timeout) {\n        const controller = new AbortController();\n        timeoutSignal = setTimeout(() => controller.abort(), this.config.timeout);\n        init.signal = controller.signal;\n      }\n\n      return fetchHar(har as Har, {\n        files: data.files || {},\n        init,\n        userAgent: this.userAgent,\n      })\n        .then(async (res: Response) => {\n          const parsed = await parseResponse<HTTPStatus>(res);\n\n          if (res.status >= 400 && res.status <= 599) {\n            throw new FetchError<typeof parsed.status, typeof parsed.data>(\n              parsed.status,\n              parsed.data,\n              parsed.headers,\n              parsed.res,\n            );\n          }\n\n          return parsed;\n        })\n        .finally(() => {\n          if (this.config.timeout) {\n            clearTimeout(timeoutSignal);\n          }\n        });\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;AAMA,OAAO,cAAc;AACrB,OAAO,cAAc;AACrB,OAAO,SAAS;AAKhB,IAAqB,UAArB,MAA6B;AAAA,EAC3B;AAAA,EAEQ,OAA4B,CAAC;AAAA,EAE7B,SAKA;AAAA,EAEA,SAAwB,CAAC;AAAA,EAEzB;AAAA,EAER,YAAY,YAAoD,WAAoB;AAClF,QAAI;AAAY,WAAK,OAAO,IAAI,KAAK,UAAU;AAC/C,QAAI;AAAW,WAAK,YAAY;AAAA,EAClC;AAAA,EAEA,QAAQ,MAAW;AACjB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,UAAU,QAAuB;AAC/B,SAAK,SAAS;AACd,WAAO;AAAA,EACT;AAAA,EAEA,aAAa,WAAmB;AAC9B,SAAK,YAAY;AACjB,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,QAA6B;AACtC,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,KAAa,YAA6C,CAAC,GAAG;AACtE,SAAK,SAAS,EAAE,KAAK,UAAU;AAC/B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,MACJ,MACA,QACA,MACA,UACA;AACA,UAAM,YAAY,KAAK,KAAK,UAAU,MAAM,MAAM;AAElD,WAAO,KAAK,eAA2B,WAAW,MAAM,QAAQ;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,WAAsB,MAAkB,MAAkB;AACzE,WAAO,SAAS,KAAK,MAAM,WAAW,MAAM,IAAI;AAAA,EAClD;AAAA,EAEA,MAAM,eACJ,WACA,MACA,UACA;AACA,WAAO,cAAc,WAAW,MAAM,QAAQ,EAAE,KAAK,YAAU;AAC7D,YAAM,OAAO,EAAE,GAAG,OAAO;AAKzB,UAAI,KAAK,QAAQ;AACf,cAAM,iBAAiB,cAAc,KAAK,MAAM,KAAK,OAAO,KAAK,KAAK,OAAO,SAAS;AACtF,YAAI,gBAAgB;AAClB,eAAK,SAAS;AAAA,QAChB;AAAA,MACF;AAEA,YAAM,MAAM,KAAK,iBAAiB,WAAW,MAAM,YAAY,KAAK,MAAM,SAAS,CAAC;AAEpF,UAAI;AACJ,YAAM,OAAoB,CAAC;AAC3B,UAAI,KAAK,OAAO,SAAS;AACvB,cAAM,aAAa,IAAI,gBAAgB;AACvC,wBAAgB,WAAW,MAAM,WAAW,MAAM,GAAG,KAAK,OAAO,OAAO;AACxE,aAAK,SAAS,WAAW;AAAA,MAC3B;AAEA,aAAO,SAAS,KAAY;AAAA,QAC1B,OAAO,KAAK,SAAS,CAAC;AAAA,QACtB;AAAA,QACA,WAAW,KAAK;AAAA,MAClB,CAAC,EACE,KAAK,OAAO,QAAkB;AAC7B,cAAM,SAAS,MAAM,cAA0B,GAAG;AAElD,YAAI,IAAI,UAAU,OAAO,IAAI,UAAU,KAAK;AAC1C,gBAAM,IAAI;AAAA,YACR,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,YACP,OAAO;AAAA,UACT;AAAA,QACF;AAEA,eAAO;AAAA,MACT,CAAC,EACA,QAAQ,MAAM;AACb,YAAI,KAAK,OAAO,SAAS;AACvB,uBAAa,aAAa;AAAA,QAC5B;AAAA,MACF,CAAC;AAAA,IACL,CAAC;AAAA,EACH;AACF;","names":[]}