import { SchemaWrapper } from 'oas/operation/get-parameters-as-json-schema';
import { AuthForHAR } from '@readme/oas-to-har/lib/types';
import { Operation } from 'oas/operation';
import Oas from 'oas';

/**
 * Run through a JSON Schema object and compose up an object containing default data for any schema
 * property that is required and also has a defined default.
 *
 * Code partially adapted from the `json-schema-default` package but modified to only return
 * defaults of required properties.
 *
 * @todo This is a good candidate to be moved into a core `oas` library method.
 * @see {@link https://github.com/mdornseif/json-schema-default}
 */
declare function getJSONSchemaDefaults(jsonSchemas: SchemaWrapper[]): {
    [x: string]: Record<string, unknown>;
};

declare function parseResponse<HTTPStatus extends number = number>(response: Response): Promise<{
    data: any;
    status: HTTPStatus;
    headers: Headers;
    res: Response;
}>;

declare function prepareAuth(authKey: (number | string)[], operation: Operation): AuthForHAR;

/**
 * With potentially supplied body and/or metadata we need to run through them against a given API
 * operation to see what's what and prepare any available parameters to be used in an API request
 * with `@readme/oas-to-har`.
 *
 */
declare function prepareParams(operation: Operation, body?: unknown, metadata?: Record<string, unknown>): Promise<{
    body?: any;
    cookie?: Record<string, string | number | boolean> | undefined;
    files?: Record<string, Buffer> | undefined;
    formData?: any;
    header?: Record<string, string | number | boolean> | undefined;
    path?: Record<string, string | number | boolean> | undefined;
    query?: Record<string, string | number | boolean> | undefined;
    server?: {
        selected: number;
        variables: Record<string, string | number>;
    } | undefined;
}>;

/**
 * With an SDK server config and an instance of OAS we should extract and prepare the server and
 * any server variables to be supplied to `@readme/oas-to-har`.
 *
 */
declare function prepareServer(spec: Oas, url: string, variables?: Record<string, string | number>): false | {
    selected: number;
    variables: Record<string, string | number>;
};

export { getJSONSchemaDefaults, parseResponse, prepareAuth, prepareParams, prepareServer };
