{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,IAAM,iBACJ;AASF,SAAS,SAAS,KAAa;AAC7B,SAAO,eAAe,MAAM,OAAO,IAAI,KAAK,CAAC;AAC/C;AAiBA,SAAS,MAAM,KAAa;AAC1B,MAAI,CAAC,SAAS,GAAG,GAAG;AAClB,WAAO;AAAA,EACT;AAEA,QAAM,QAAQ,IAAI,KAAK,EAAE,MAAM,cAAc;AAC7C,QAAM,SAAS,CAAC;AAEhB,MAAI,MAAM,CAAC,GAAG;AACZ,WAAO,YAAY,MAAM,CAAC,EAAE,YAAY;AAExC,UAAM,iBAAiB,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,IAAI,OAAK;AAGlD,UAAI,EAAE,WAAW,OAAO,GAAG;AACzB,eAAO;AAAA,MACT;AAEA,aAAO,EAAE,YAAY;AAAA,IACvB,CAAC;AAED,WAAO,cAAc,eAAe,CAAC;AAErC,mBAAe,MAAM,CAAC,EAAE,QAAQ,eAAa;AAC3C,YAAM,IAAI,UAAU,MAAM,GAAG;AAC7B,aAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AAAA,IACpB,CAAC;AAAA,EACH;AAEA,SAAO,SAAS,CAAC,CAAC,MAAM,MAAM,SAAS,CAAC;AACxC,SAAO,OAAO,MAAM,MAAM,SAAS,CAAC,KAAK;AAEzC,SAAO,WAAW,MAAM;AACtB,UAAM,WAAW,OAAO,SAAS,WAAW;AAE5C,WAAO,OAAO,KAAK,OAAO,MAAM,QAAQ;AAAA,EAC1C;AAEA,SAAO;AACT","sourcesContent":["const DATA_URL_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@/?%\\s<>]*?)$/i;\n\n/**\n * Determine if a given data URL is valid or not.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/data_URIs}\n * @see {@link http://tools.ietf.org/html/rfc2397}\n * @see {@link http://tools.ietf.org/html/rfc2396#section2}\n */\nfunction validate(str: string) {\n  return DATA_URL_REGEX.test((str || '').trim());\n}\n\nexport interface DataURL {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [k: string]: any;\n  base64: boolean;\n  contentType?: string;\n  data: string;\n  mediaType?: string;\n  name?: string;\n  toBuffer: () => Buffer;\n}\n\n/**\n * Parse a given data URL into its individual parts.\n *\n */\nfunction parse(str: string) {\n  if (!validate(str)) {\n    return false;\n  }\n\n  const parts = str.trim().match(DATA_URL_REGEX);\n  const parsed = {} as DataURL;\n\n  if (parts[1]) {\n    parsed.mediaType = parts[1].toLowerCase();\n\n    const mediaTypeParts = parts[1].split(';').map(x => {\n      // `name` attributes are for filenames so we shouldn't lowercase them as some filesystems are\n      // case-sensitive.\n      if (x.startsWith('name=')) {\n        return x;\n      }\n\n      return x.toLowerCase();\n    });\n\n    parsed.contentType = mediaTypeParts[0];\n\n    mediaTypeParts.slice(1).forEach(attribute => {\n      const p = attribute.split('=');\n      parsed[p[0]] = p[1];\n    });\n  }\n\n  parsed.base64 = !!parts[parts.length - 2];\n  parsed.data = parts[parts.length - 1] || '';\n\n  parsed.toBuffer = () => {\n    const encoding = parsed.base64 ? 'base64' : 'utf8';\n\n    return Buffer.from(parsed.data, encoding);\n  };\n\n  return parsed;\n}\n\nexport { parse, validate };\n"]}